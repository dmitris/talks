Go dependency management with modules
- practical introduction

18 Oct 2018

Tags: golang, go1.11, modules

Dmitry Savintsev
Oath
https://github.com/dmitris
@dimisec

* Main topics
- why Go modules needed and what they are
- Go modules 101 / Getting Started
- Daily life with modules (main commands, gotchas...)
- Compare with the current tool (glide / dep)
- Making the transition
- Next steps with modules

* Need for dependency management

when programs `import` packages, go tool need to know:

- where to get them from

- what version to use

- for direct and indirect dependencies

* "Legacy" go get

- uses GOPATH for local storage of code

- package already in GOPATH? use it

- package not in GOPATH? fetch the *latest* version

- `go get -u <package>` - update to the *latest* version

* Diamond Dependencies - Tragedy in Three Acts

* Act I
Start with just A, then add A -> (= "depends on") B, B -> D

`go get` installs A v1.0, B v1.0, D v1.0


	|              A v1.0
	|             / 
	|            /   
	|           /     
	|          /       
	|         B v1.0      
	|          \       
	|           \     
	|            \   
	|             \ 
	|              D v1.0

* Intermission I
Time passes...

D gets updated up to v1.4

but A is for now is good with B and D v1.0
- HAPPY :)

* Act II
Add dependency A -> C; C *needs* D >= *v1.4* : C -> D v1.4

but `go get` find D in GOPATH and does nothing 
- BROKEN :(

	|              A
	|             / \
	|            /   \
	|           /     \
	|          /       \ 
	|         B v1.0    C v1.0 ( -> D >= v1.4)
	|          \       /
	|           \     /
	|            \   /
	|             \ /
	|              D v1.0

Solution: maybe update all dependencies?

* Intermission II
In the meantime, D's Author added D *v1.6* - which unfortunately breaks C...

* Act III
Run `go get -u`, updates D in GOPATH to *v1.6* 
- BROKEN :(

	|              A
	|             / \
	|            /   \
	|           /     \
	|          /       \ 
	|         B v1.0    C v1.0 ( -> D >= v1.4)
	|          \       /
	|           \     /
	|            \   /
	|             \ /
	|              D v1.6

< End >

* Ideal - full spec of dependencies, dependencies don't "float upwards":
A -> B v1.0
A -> C v1.0
B -> D v1.0
C -> D v1.4 (D v1.4 "wins")
- HAPPY :)

	|              A
	|             / \
	|            /   \
	|           /     \
	|          /       \ 
	|         B v1.0    C v1.0 ( -> D >= v1.4)
	|          \       /
	|           \     /
	|            \   /
	|             \ /
	|              D v1.4


* Previous / existing Go dependency tools
- GOPATH, godep, gopkg.in, glide, vendor dir, dep
- also goven, godeps, gb, govendor, etc.
- Manifest (Gopkg.toml, glide.yaml) and Lock (Gopkg.lock, glide.lock)

* Gopkg.toml example 
`dep init` in github.com/tchap/go-patricia/patricia

	[[constraint]]
	  name = "github.com/satori/go.uuid"
	  version = "1.2.0"

	[prune]
	  go-tests = true
	  unused-packages = true

* Gopkg.lock example
	[[projects]]
	  digest = "1:274f67cb6fed9588ea2521ecdac05a6d62a8c51c074c1fccc6a49a40ba80e925"
	  name = "github.com/satori/go.uuid"
	  packages = ["."]
	  pruneopts = "UT"
	  revision = "f58768cc1a7a7e77a3bd49e98cdd21419399b6a3"
	  version = "v1.2.0"

( exact revision is recorded in Gopkg.lock )

* Go modules 101

* go mod init

- Outside GOPATH (ex. /tmp/dev):
	go mod init <github.com/user/repo[/subpkg]>

- Inside GOPATH:
	GO111MODULE=on go mod init <github.com/user/repo[/subpkg]>

- converts dependencies from Gopkg.lock if present
- GO111MODULE=on is needed for all 'go mod' operations under GOPATH

* Example: converting existing project

	$ pwd
	<GOPATH>/src/github.com/tchap/go-patricia/patricia
	$ go list
	github.com/tchap/go-patricia/patricia

	$ GO111MODULE=on go mod init
	go: creating new go.mod: module github.com/tchap/go-patricia/patricia
	go: copying requirements from Gopkg.lock

	$ cat go.mod
	module github.com/tchap/go-patricia/patricia

	require github.com/satori/go.uuid v1.2.0

	$ GO111MODULE=on go mod verify
	all modules verified

* Build and Test
	$ GO111MODULE=on go install ./... && GO111MODULE=on go test ./...
	ok  	github.com/tchap/go-patricia/patricia	4.065s
* Outside of GOPATH
	If not under GOPATH, just `go`! :)
	$ mkdir /tmp/patricia/
	$ cp -a * /tmp/patricia/
	$ pushd /tmp/patricia/
	/tmp/patricia ~/go/src/github.com/tchap/go-patricia/patricia

	$ go list -m
	github.com/tchap/go-patricia/patricia
	$ go mod verify
	all modules verified

	$ go install ./... && go test ./...
	ok  	github.com/tchap/go-patricia/patricia	4.129s

* Small Module Dependency Graph
	$ go mod graph
	github.com/tchap/go-patricia/patricia github.com/satori/go.uuid@v1.2.0

* Bigger Module Dependency Graph (partial)
	github.com/yahoo/athenz@v1.8.3 golang.org/x/sys@v0.0.0-20180920110915-d641721ec2de
	github.com/yahoo/athenz@v1.8.3 gopkg.in/natefinch/lumberjack.v2@v2.0.0
	github.com/yahoo/athenz@v1.8.3 gopkg.in/yaml.v2@v2.2.1
	gopkg.in/yaml.v2@v2.2.1 gopkg.in/check.v1@v0.0.0-20161208181325-20d25e280405
	google.golang.org/appengine@v1.1.0 golang.org/x/net@v0.0.0-20180724234803-3673e40ba225
	google.golang.org/appengine@v1.1.0 github.com/golang/protobuf@v1.2.0
	github.com/google/go-github/v18@v18.2.0 google.golang.org/appengine@v1.1.0
	github.com/google/go-github/v18@v18.2.0 golang.org/x/sys@v0.0.0-20180824143301-4910a1d54f87
	github.com/google/go-github/v18@v18.2.0 golang.org/x/oauth2@v0.0.0-20180821212333-d2e6202438be
	github.com/pborman/uuid@v1.2.0 github.com/google/uuid@v1.0.0
	github.com/google/go-github/v18@v18.2.0 golang.org/x/crypto@v0.0.0-20180820150726-614d502a4dac
	google.golang.org/grpc@v1.15.0 cloud.google.com/go@v0.26.0
	google.golang.org/grpc@v1.15.0 github.com/client9/misspell@v0.3.4
	google.golang.org/grpc@v1.15.0 github.com/golang/glog@v0.0.0-20160126235308-23def4e6c14b
	google.golang.org/grpc@v1.15.0 github.com/golang/lint@v0.0.0-20180702182130-06c8688daad7
	google.golang.org/grpc@v1.15.0 github.com/golang/mock@v1.1.1
	google.golang.org/grpc@v1.15.0 github.com/golang/protobuf@v1.2.0
	google.golang.org/grpc@v1.15.0 github.com/kisielk/gotool@v1.0.0
	google.golang.org/grpc@v1.15.0 golang.org/x/lint@v0.0.0-20180702182130-06c8688daad7
	google.golang.org/grpc@v1.15.0 golang.org/x/net@v0.0.0-20180826012351-8a410e7b638d

* replace module statement

* replace with local (filesystem) clone
- must be a module (have go.mod)
- can be either absolute or relative path

	$ mkdir /tmp/satori && cd /tmp/satori
	$ git clone https://github.com/satori/go.uuid
	$ cd go.uuid
	# need to turn into module
	$ go mod init

	$ cd /tmp/patricia
	$ cat go.mod
	module github.com/tchap/go-patricia/patricia

	require (
		github.com/kr/pretty v0.1.0 // indirect
		github.com/satori/go.uuid v1.2.0
		gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 // indirect
	)

	replace github.com/satori/go.uuid => /tmp/satori/go.uuid

* replace with gohack

	$ go get github.com/rogpeppe/gohack

	$ gohack github.com/satori/go.uuid

	$ gohack github.com/satori/go.uuid
	creating github.com/satori/go.uuid@v1.2.0
	github.com/satori/go.uuid => /Users/<username>/gohack/github.com/satori/go.uuid


	$ cat go.mod
	module github.com/tchap/go-patricia/patricia

	require github.com/satori/go.uuid v1.2.0

	replace github.com/satori/go.uuid => /Users/<username>/gohack/github.com/satori/go.uuid

* gohack undo

$ gohack -u
	dropped github.com/satori/go.uuid

* replace with remote version (or mirror)
- Must have version spec at the right from replacing module!
- module.orig [v<A>.<B>.<C>] => module.replacement v<X>.<Y>.<Z>
	$ cat go.mod
	module github.com/tchap/go-patricia/patricia

	require github.com/satori/go.uuid v1.2.0

	* replace with remote version or mirror
	$ cat go.mod
	module github.com/tchap/go-patricia/patricia

	require github.com/satori/go.uuid v1.2.0

	replace github.com/satori/go.uuid => github.com/dmitris/go.uuid v1.2.0
	$ go mod verify
	all modules verified

* upgrade dependency modules
$ go list -m all | grep -i sushi
github.com/BurntSushi/toml v0.3.0
$ go list -m -versions github.com/BurntSushi/toml
github.com/BurntSushi/toml v0.1.0 v0.2.0 v0.3.0 v0.3.1
$ cp go.mod go.mod.backup

$ go get -v -u github.com/BurntSushi/toml
go: downloading github.com/BurntSushi/toml v0.3.1
github.com/BurntSushi/toml

$ diff go.mod go.mod.backup
4c4
< 	github.com/BurntSushi/toml v0.3.1 // indirect
---
> 	github.com/BurntSushi/toml v0.3.0 // indirect

* downgrade - similar, with go get

$ go get -v -u github.com/BurntSushi/toml@v0.2.0
go: finding github.com/BurntSushi/toml v0.2.0
go: downloading github.com/BurntSushi/toml v0.2.0
github.com/BurntSushi/toml

$ diff go.mod go.mod.backup
4c4
< 	github.com/BurntSushi/toml v0.2.0 // indirect
---
> 	github.com/BurntSushi/toml v0.3.0 // indirect

* module versions >= 2

- versions higher than 1.x become part of the import statement
	$ grep go-github go.mod
		github.com/google/go-github/v18 v18.2.0

	import "github.com/google/go-github/v18/github"
	// use is as normal
	var prs []*github.PullRequest

	// CreatePR takes branch name to create a new pr on a given repo.
	func (g *Github) CreatePR(ctx context.Context, branchName, owner, repo string) 
		(pr *github.PullRequest, err error) {
		newPR := &github.NewPullRequest{
			Title:               github.String("Test PR through go-github API basec on: " + branchName),
			Head:                github.String(branchName),
			Base:                github.String("master"),
			MaintainerCanModify: github.Bool(true),
		}
		var ghresp *github.Response

* go mod subcommands

	Usage:

		go mod <command> [arguments]

	The commands are:

		download    download modules to local cache

		edit        edit go.mod from tools or scripts

		graph       print module requirement graph

		init        initialize new module in current directory

		tidy        add missing and remove unused modules

		vendor      make vendored copy of dependencies

		verify      verify dependencies have expected content

		why         explain why packages or modules are needed

* go mod why
	$ go mod why gopkg.in/check.v1
	# gopkg.in/check.v1
	github.com/tchap/go-patricia/patricia
	github.com/tchap/go-patricia/patricia.test
	github.com/satori/go.uuid
	github.com/satori/go.uuid.test
	gopkg.in/check.v1

* Next Steps

* Dive Right In!

.image images/diveinmeme.jpeg

* Getting Started with modules
- start by trying in existing project: 

	pkg=`go list`; GO111MODULE=on go mod init $pkg

- try to build and test it outside of GOPATH

- use `go get` to add or update dependencies

- keep in mind you can replace with local or remote modules

- poke some open-source projects you use to start using modules

* Links and References
.link https://golang.org/cmd/go/#hdr-Modules__module_versions__and_more `cmd/go` documentation
.link https://github.com/golang/go/wiki/Modules Modules Wiki
.link https://github.com/go-modules-by-example/index/blob/master/README.md Modules by Example 
.link https://www.youtube.com/watch?v=F8nrpe0XWRg Russ Cox's GopherCon Singapore Keynote 
.link https://research.swtch.com/vgo Russ Cox's original `vgo` papers
.link https://www.youtube.com/watch?v=6MbIzJmLz6Q&list=PL8QGElREVyDA2iDrPNeCe8B1u7li5S6ep&index=5&t=0s Paul Jolly's talk
.link https://talks.godoc.org/github.com/myitcv/talks/2018-08-15-glug-modules/main.slide slides